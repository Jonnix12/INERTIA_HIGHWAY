//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Car/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""21aa00a8-f1a5-4412-93ff-5039c252e5c8"",
            ""actions"": [
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""23935ff5-bcfb-49dd-ace2-bd86e7386e9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""d3506223-6a00-4ea0-84ea-ce075a3bdeaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Button"",
                    ""id"": ""01116937-6944-4734-9ab4-22ec5eb6ffcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpShiftGear"",
                    ""type"": ""Button"",
                    ""id"": ""6bba8db8-17d8-472c-a4cb-d5f66c2bea59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DawnShiftGear"",
                    ""type"": ""Button"",
                    ""id"": ""48580633-7086-4527-8ca3-8f0d812e0fb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""88c5b207-c823-457b-b143-1dcf61d9d119"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""accelerationGamePad"",
                    ""id"": ""965ed002-6165-42b7-9627-2f5e1d2418ba"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bd15f1dd-e75f-4da9-aad4-95b03a5052a6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a97d6152-961d-4fc7-8fad-9362b2808db1"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""accelerationKeybord"",
                    ""id"": ""50d4c2c1-7b32-4258-a455-96acb86cc018"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3f23562a-f1b2-4865-b857-ab6052795334"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6c2e4350-d62f-425f-b5af-1e885d935cbb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d21cd5fe-9766-4412-afd4-720de83121c3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c89d2a9-c078-4093-b9b0-6ae089471ad3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Steer"",
                    ""id"": ""274d5c7c-8739-453c-8193-f6a857b5a5e2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""84d4b75c-97d7-471e-9ad8-b60376f80a90"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2cb599ef-323e-4ebf-aca9-e18021697d66"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""SteerKeybord"",
                    ""id"": ""7899e250-ddbc-44b1-999f-6ada00592a25"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2d18f9d0-cc6c-401f-b22e-334295f0fdcc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b8357003-81c6-4552-b953-ebd2b5e7a517"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""70bb7003-d98c-497f-9f26-19198f0da310"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DawnShiftGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6a64b4a-a86e-4cd8-a237-b7c344ea1ac2"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DawnShiftGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec293423-3228-4439-94ce-c6ed82c0b551"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpShiftGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3e0dd4e-49e1-40a0-a0fe-842d12ce5cf0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpShiftGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f693a635-9efd-485d-ac64-0d3c3c9dae1d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CamControl"",
            ""id"": ""7791c7f6-11a7-458e-86fe-664d6283d2e9"",
            ""actions"": [
                {
                    ""name"": ""CamControl"",
                    ""type"": ""Button"",
                    ""id"": ""97a8a3de-f89a-401e-9ca6-8fada37b246c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52a2cfdf-4027-4a15-91ad-ffd92127ffdd"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59952667-0631-440e-b7dd-70c5291d95cf"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""43ffc6b9-692e-4cbf-92bb-4789eb679216"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""c36b5d94-3cdb-47fa-8d7a-e1d75c93c6d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""cefe8266-842b-494f-b4ac-21e52b5feaca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""a623708d-3c65-4e10-b5d1-8fabd6056cd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1987da19-2ba5-4fd9-bef5-6a91e76b918f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5e962cc-b85f-4549-a749-eb307ee51612"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40c3df55-db74-4421-8daa-2c2659274197"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Acceleration = m_Default.FindAction("Acceleration", throwIfNotFound: true);
        m_Default_Break = m_Default.FindAction("Break", throwIfNotFound: true);
        m_Default_Steering = m_Default.FindAction("Steering", throwIfNotFound: true);
        m_Default_UpShiftGear = m_Default.FindAction("UpShiftGear", throwIfNotFound: true);
        m_Default_DawnShiftGear = m_Default.FindAction("DawnShiftGear", throwIfNotFound: true);
        m_Default_Pause = m_Default.FindAction("Pause", throwIfNotFound: true);
        // CamControl
        m_CamControl = asset.FindActionMap("CamControl", throwIfNotFound: true);
        m_CamControl_CamControl = m_CamControl.FindAction("CamControl", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Click = m_Menu.FindAction("Click", throwIfNotFound: true);
        m_Menu_Back = m_Menu.FindAction("Back", throwIfNotFound: true);
        m_Menu_Move = m_Menu.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Acceleration;
    private readonly InputAction m_Default_Break;
    private readonly InputAction m_Default_Steering;
    private readonly InputAction m_Default_UpShiftGear;
    private readonly InputAction m_Default_DawnShiftGear;
    private readonly InputAction m_Default_Pause;
    public struct DefaultActions
    {
        private @CarInput m_Wrapper;
        public DefaultActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acceleration => m_Wrapper.m_Default_Acceleration;
        public InputAction @Break => m_Wrapper.m_Default_Break;
        public InputAction @Steering => m_Wrapper.m_Default_Steering;
        public InputAction @UpShiftGear => m_Wrapper.m_Default_UpShiftGear;
        public InputAction @DawnShiftGear => m_Wrapper.m_Default_DawnShiftGear;
        public InputAction @Pause => m_Wrapper.m_Default_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Acceleration.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAcceleration;
                @Break.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBreak;
                @Steering.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteering;
                @UpShiftGear.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUpShiftGear;
                @UpShiftGear.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUpShiftGear;
                @UpShiftGear.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUpShiftGear;
                @DawnShiftGear.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDawnShiftGear;
                @DawnShiftGear.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDawnShiftGear;
                @DawnShiftGear.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDawnShiftGear;
                @Pause.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
                @UpShiftGear.started += instance.OnUpShiftGear;
                @UpShiftGear.performed += instance.OnUpShiftGear;
                @UpShiftGear.canceled += instance.OnUpShiftGear;
                @DawnShiftGear.started += instance.OnDawnShiftGear;
                @DawnShiftGear.performed += instance.OnDawnShiftGear;
                @DawnShiftGear.canceled += instance.OnDawnShiftGear;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);

    // CamControl
    private readonly InputActionMap m_CamControl;
    private ICamControlActions m_CamControlActionsCallbackInterface;
    private readonly InputAction m_CamControl_CamControl;
    public struct CamControlActions
    {
        private @CarInput m_Wrapper;
        public CamControlActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamControl => m_Wrapper.m_CamControl_CamControl;
        public InputActionMap Get() { return m_Wrapper.m_CamControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CamControlActions set) { return set.Get(); }
        public void SetCallbacks(ICamControlActions instance)
        {
            if (m_Wrapper.m_CamControlActionsCallbackInterface != null)
            {
                @CamControl.started -= m_Wrapper.m_CamControlActionsCallbackInterface.OnCamControl;
                @CamControl.performed -= m_Wrapper.m_CamControlActionsCallbackInterface.OnCamControl;
                @CamControl.canceled -= m_Wrapper.m_CamControlActionsCallbackInterface.OnCamControl;
            }
            m_Wrapper.m_CamControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CamControl.started += instance.OnCamControl;
                @CamControl.performed += instance.OnCamControl;
                @CamControl.canceled += instance.OnCamControl;
            }
        }
    }
    public CamControlActions @CamControl => new CamControlActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Click;
    private readonly InputAction m_Menu_Back;
    private readonly InputAction m_Menu_Move;
    public struct MenuActions
    {
        private @CarInput m_Wrapper;
        public MenuActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Menu_Click;
        public InputAction @Back => m_Wrapper.m_Menu_Back;
        public InputAction @Move => m_Wrapper.m_Menu_Move;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnClick;
                @Back.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnBack;
                @Move.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IDefaultActions
    {
        void OnAcceleration(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnUpShiftGear(InputAction.CallbackContext context);
        void OnDawnShiftGear(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ICamControlActions
    {
        void OnCamControl(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
